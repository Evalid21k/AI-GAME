<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Veilstep: Echoes of the Hollow</title>
  <style>
    body {
      margin: 0;
      background: #0c0c0c;
      overflow: hidden;
      touch-action: none;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
    }
    canvas {
      background: #111;
      image-rendering: crisp-edges;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas"></canvas>

  <script>
    (() => {
      // Canvas setup
      const canvas = document.getElementById('gameCanvas');
      const ctx = canvas.getContext('2d');
      
      // Set responsive canvas size
      function resizeCanvas() {
        const scale = Math.min(window.innerWidth / 800, window.innerHeight / 450);
        canvas.width = 800 * devicePixelRatio;
        canvas.height = 450 * devicePixelRatio;
        canvas.style.width = 800 * scale + 'px';
        canvas.style.height = 450 * scale + 'px';
        ctx.scale(devicePixelRatio, devicePixelRatio);
      }
      window.addEventListener('resize', resizeCanvas);
      resizeCanvas();

      // Game constants
      const game = {
        keys: new Set(),
        gravity: 0.6,
        friction: 0.85,
        airResistance: 0.95,
        currentRealm: "light",
        camera: { x: 0, y: 0 },
        particles: []
      };

      // Player object
      const player = {
        x: 50,
        y: 300,
        width: 32,
        height: 48,
        vx: 0,
        vy: 0,
        color: "#9ff",
        grounded: false,
        jumpBuffer: 0,
        coyoteTime: 0
      };

      // Platforms data
      const platforms = [
        { x: 0, y: 410, width: 800, height: 40, realm: "both" },
        { x: 300, y: 320, width: 200, height: 20, realm: "light" },
        { x: 100, y: 250, width: 100, height: 20, realm: "hollow" },
        { x: 500, y: 180, width: 100, height: 20, realm: "both", moving: true, dx: 1 }
      ];

      // Input handling
      document.addEventListener("keydown", e => {
        game.keys.add(e.code);
        if (e.code === "Space" && !e.repeat) shiftRealm();
      });

      document.addEventListener("keyup", e => game.keys.delete(e.code));

      // Realm shifting
      function shiftRealm() {
        game.currentRealm = game.currentRealm === "light" ? "hollow" : "light";
        player.color = game.currentRealm === "light" ? "#9ff" : "#f9f";
        
        // Particle effect
        for (let i = 0; i < 20; i++) {
          game.particles.push({
            x: player.x + player.width/2,
            y: player.y + player.height/2,
            vx: (Math.random() - 0.5) * 8,
            vy: (Math.random() - 0.5) * 8,
            life: 30,
            color: player.color
          });
        }
      }

      // Main game loop
      function update() {
        // Horizontal movement
        let acc = 0;
        if (game.keys.has("ArrowLeft") || game.keys.has("KeyA")) acc -= 0.8;
        if (game.keys.has("ArrowRight") || game.keys.has("KeyD")) acc += 0.8;
        
        player.vx += acc;
        player.vx *= player.grounded ? game.friction : game.airResistance;
        player.vx = Math.max(-8, Math.min(8, player.vx));

        // Jump handling
        player.jumpBuffer = Math.max(0, player.jumpBuffer - 1);
        player.coyoteTime = Math.max(0, player.coyoteTime - 1);

        if (player.grounded) player.coyoteTime = 5;
        if (game.keys.has("ArrowUp") || game.keys.has("KeyW")) player.jumpBuffer = 7;

        if (player.jumpBuffer && player.coyoteTime) {
          player.vy = -12;
          player.grounded = false;
          player.jumpBuffer = 0;
          player.coyoteTime = 0;
        }

        // Physics
        player.vy += game.gravity;
        player.vy = Math.min(12, player.vy);
        player.x += player.vx;
        player.y += player.vy;

        // Platform collision
        player.grounded = false;
        const currentPlatforms = platforms.filter(p => 
          p.realm === "both" || p.realm === game.currentRealm
        );

        for (const platform of currentPlatforms) {
          if (platform.moving) {
            platform.x += platform.dx;
            if (platform.x < 0 || platform.x + platform.width > 800) {
              platform.dx *= -1;
            }
          }

          if (checkCollision(player, platform)) {
            const dy = (player.y + player.height) - platform.y;
            if (dy > 0 && dy < 10) {
              player.y = platform.y - player.height;
              player.vy = 0;
              player.grounded = true;
            }
          }
        }

        // World bounds
        player.x = Math.max(0, Math.min(800 - player.width, player.x));
        if (player.y > 450) {
          player.y = -player.height;
          player.vy = 0;
        }

        // Update particles
        game.particles = game.particles.filter(p => {
          p.x += p.vx;
          p.y += p.vy;
          p.vy += 0.3;
          p.life--;
          return p.life > 0;
        });
      }

      // Rendering
      function draw() {
        ctx.fillStyle = game.currentRealm === "light" ? "#1a1a2a" : "#0a0a0a";
        ctx.fillRect(0, 0, 800, 450);

        // Draw background pattern
        ctx.fillStyle = game.currentRealm === "light" ? "#2a2a3a" : "#1a1a1a";
        for (let y = 0; y < 450; y += 40) {
          for (let x = 0; x < 800; x += 40) {
            if ((x/40 + y/40) % 2 === 0) {
              ctx.fillRect(x, y, 20, 20);
            }
          }
        }

        // Draw game objects
        platforms.forEach(platform => {
          if (platform.realm === "both" || platform.realm === game.currentRealm) {
            ctx.fillStyle = game.currentRealm === "light" ? "#4a4a6a" : "#3a3a3a";
            ctx.fillRect(platform.x, platform.y, platform.width, platform.height);
          }
        });

        ctx.fillStyle = player.color;
        ctx.fillRect(player.x, player.y, player.width, player.height);

        game.particles.forEach(p => {
          ctx.fillStyle = p.color;
          ctx.fillRect(p.x, p.y, 4, 4);
        });
      }

      // Helper functions
      function checkCollision(a, b) {
        return a.x < b.x + b.width &&
               a.x + a.width > b.x &&
               a.y < b.y + b.height &&
               a.y + a.height > b.y;
      }

      // Start game loop
      function gameLoop() {
        update();
        draw();
        requestAnimationFrame(gameLoop);
      }
      gameLoop();
    })();
  </script>
</body>
</html>
