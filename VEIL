<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Veilstep: Echoes of the Hollow</title>
  <style>
    body {
      margin: 0;
      background: #0c0c0c;
      overflow: hidden;
    }
    canvas {
      display: block;
      margin: 0 auto;
      background: #111;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas" width="800" height="450"></canvas>

  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");

    const game = {
      width: canvas.width,
      height: canvas.height,
      keys: {},
      gravity: 0.6,
      friction: 0.8,
      currentRealm: "light",
    };

    const player = {
      x: 50,
      y: 300,
      width: 40,
      height: 60,
      vx: 0,
      vy: 0,
      color: "#9ff",
      grounded: false,
    };

    const platforms = [
      { x: 0, y: 410, width: 800, height: 40 },
      { x: 300, y: 320, width: 200, height: 20 },
      { x: 100, y: 250, width: 100, height: 20 },
    ];

    document.addEventListener("keydown", (e) => {
      game.keys[e.code] = true;

      // Shift realms
      if (e.code === "Space") {
        game.currentRealm = game.currentRealm === "light" ? "hollow" : "light";
        player.color = game.currentRealm === "light" ? "#9ff" : "#f9f";
        console.log("Switched to", game.currentRealm);
      }
    });

    document.addEventListener("keyup", (e) => {
      game.keys[e.code] = false;
    });

    function update() {
      // Horizontal movement
      if (game.keys["ArrowLeft"] || game.keys["KeyA"]) player.vx -= 0.5;
      if (game.keys["ArrowRight"] || game.keys["KeyD"]) player.vx += 0.5;

      // Jump
      if ((game.keys["ArrowUp"] || game.keys["KeyW"]) && player.grounded) {
        player.vy = -12;
        player.grounded = false;
      }

      // Apply physics
      player.vx *= game.friction;
      player.vy += game.gravity;
      player.x += player.vx;
      player.y += player.vy;

      // Platform collision
      player.grounded = false;
      for (const platform of platforms) {
        if (
          player.x < platform.x + platform.width &&
          player.x + player.width > platform.x &&
          player.y < platform.y + platform.height &&
          player.y + player.height > platform.y
        ) {
          if (player.vy >= 0) {
            player.y = platform.y - player.height;
            player.vy = 0;
            player.grounded = true;
          }
        }
      }

      // Bounds
      if (player.y > game.height) player.y = 0;
    }

    function draw() {
      ctx.fillStyle = game.currentRealm === "light" ? "#222" : "#000";
      ctx.fillRect(0, 0, game.width, game.height);

      // Draw platforms
      ctx.fillStyle = game.currentRealm === "light" ? "#444" : "#222";
      for (const platform of platforms) {
        ctx.fillRect(platform.x, platform.y, platform.width, platform.height);
      }

      // Draw player
      ctx.fillStyle = player.color;
      ctx.fillRect(player.x, player.y, player.width, player.height);
    }

    function gameLoop() {
      update();
      draw();
      requestAnimationFrame(gameLoop);
    }

    gameLoop();
  </script>
</body>
</html>
